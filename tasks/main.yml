---
# tasks file for mediapeers.s3-website-hosting

- name: Name of the website s3 bucket that will be used
  debug:
    var: s3_website_bucket_name

- name: Create S3 bucket for website hosting
  s3_bucket:
    name: "{{ s3_website_bucket_name }}"
    policy: "{{ lookup('template', 's3_read_website_bucket.json.j2') }}"
    state: present
    region: "{{ s3_website_bucket_region }}"
  register: website_bucket

- name: S3 bucket details
  debug:
    var: website_bucket

- name: Configure S3 bucket for website hosting
  s3_website:
    name: "{{ website_bucket.name }}"
    suffix: "{{ s3_website_root_object }}"
    state: present

- name: Output Website domains
  debug:
    var: s3_website_alias_domain_names

- name: Create Cloudfront Website distribution
  cloudfront_distribution:
    enabled: true
    origins:
      - id: 'S3-{{ s3_website_bucket_name }}'
        domain_name: '{{ s3_website_bucket_name }}.s3-website-{{ s3_website_bucket_region }}.amazonaws.com'
        custom_origin_config:
          origin_protocol_policy: 'http-only'
          http_port: 80
          https_port: 443
        custom_headers: []
    default_root_object: "{{ s3_website_root_object }}"
    price_class: "{{ s3_website_price_class }}"
    ipv6_enabled: true
    cache_behaviors: []
    default_cache_behavior:
      target_origin_id: 'S3-{{ s3_website_bucket_name }}'
      viewer_protocol_policy: 'redirect-to-https'
      allowed_methods:
        items:
          - HEAD
          - GET
        cached_methods:
          - HEAD
          - GET
      min_ttl: 0
      default_ttl: "{{ s3_website_caching_default_ttl }}"
      max_ttl: "{{ s3_website_caching_max_ttl }}"
      compress: true
      smooth_streaming: false
      forwarded_values:
        query_string: false
        headers: []
        cookies: { forwards: 'none' }
        query_string_cache_keys: []
      lambda_function_associations: "{{ s3_website_cloudfront_lambda_functions }}"
      trusted_signers: { enabled: false, items: [] }
    http_version: 'http2'
    restrictions:
      geo_restriction:
        restriction_type: 'none'
    custom_error_responses:
      - { error_code: 403, reponse_page_path: "/{{ s3_website_root_object }}", response_code: '200', error_caching_min_ttl: 300 }
      - { error_code: 404, reponse_page_path: "/{{ s3_website_root_object }}", response_code: '200', error_caching_min_ttl: 300 }
    aliases: "{{ s3_website_alias_domain_names }}"
    viewer_certificate:
      ssl_support_method: 'sni-only'
      minimum_protocol_version: "{{ s3_website_cloudfront_tls_policy }}"
      certificate: "{{ s3_website_certificate_arn }}"
      acm_certificate_arn: "{{ s3_website_certificate_arn }}"
      certificate_source: 'acm'
    comment: 'Created by Ansible s3-website-hosting role'
    caller_reference: 'web-fe-distribution-{{ ansible_date_time.epoch }}'
    logging:
      enabled: false
      enabled include_cookies: false
      bucket: ''
      prefix: ''
    state: present
  register: cloudfront_website_distribution

- name: Output info
  debug:
    msg: "We can't update CNAMEs in existing Cloudfront distribution through Ansible (at the moment). Please ensure all domains those are added: {{ s3_website_alias_domain_names }}"
  when:
    - cloudfront_website_distribution.failed is defined
    - cloudfront_website_distribution.failed

- name: Get Cloudfront facts if distribution was already present
  cloudfront_facts:
    distribution: true
    domain_name_alias: '{{ s3_website_alias_domain_names | first }}'
  register: cloudfront_website_distribution_tmp
  when:
    - cloudfront_website_distribution.failed is defined
    - cloudfront_website_distribution.failed

- name: Get first cloudfront resuls key
  set_fact:
    cloudfront_first_key: "{{ cloudfront_website_distribution_tmp.ansible_facts.cloudfront.keys() | list | sort | first }}"
  when:
    - cloudfront_website_distribution_tmp is defined
    - cloudfront_website_distribution_tmp.ansible_facts is defined

- name: Assign cloudfront result variable from facts
  set_fact:
    cloudfront_website_distribution:
      result: "{{ cloudfront_website_distribution_tmp.ansible_facts.cloudfront[cloudfront_first_key] }}"
  when:
    - cloudfront_first_key is defined
    - cloudfront_website_distribution_tmp is defined
    - cloudfront_website_distribution_tmp.ansible_facts is defined

- name: Save Cloudfront Domain and ID in variables
  set_fact:
    cloudfront_domain: "{{ cloudfront_website_distribution.result.Distribution.DomainName }}"
    cloudfront_id: "{{ cloudfront_website_distribution.result.Distribution.Id }}"

- name: Output Cloudfront domain
  debug: var=cloudfront_domain

- name: Output Cloudfront ID
  debug: var=cloudfront_id

- name: Create DNS alias for CloudFront distribution on Route53
  route53:
    command: create
    zone: "{{ item.split('.')[-2:] | join('.') }}"
    record: "{{ item }}"
    type: A
    value: "{{ cloudfront_domain }}"
    alias: True
    overwrite: True
    alias_hosted_zone_id: "{{ cloudfront_hosted_zone_id }}"
  with_items: '{{ s3_website_alias_domain_names }}'
  when: s3_website_create_dns_record
